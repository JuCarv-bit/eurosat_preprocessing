wandb: Currently logged in as: analiju (analiju-paris) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin
Conda version: 25.5.1
Python version: 3.10.16
PyTorch version: 2.5.1
CUDA available: True
CUDA device count: 3
Torchvision version: 0.20.1
Successfully set to use GPU: 2 (Quadro RTX 5000)
Final DEVICE variable is set to: cuda:2
Current PyTorch default device: 0
Current PyTorch default device (after set_device): 2
Dummy tensor is on device: cuda:2

=== Starting run with seed 42 ===
Total samples in folder: 27000, classes: ['AnnualCrop', 'Forest', 'HerbaceousVegetation', 'Highway', 'Industrial', 'Pasture', 'PermanentCrop', 'Residential', 'River', 'SeaLake']
Stratified split sizes: train=21600, val=2700, test=2700
wandb: Tracking run with wandb version 0.19.11
wandb: Run data is saved locally in /users/c/carvalhj/projects/eurosat_preprocessing/exploratory_notebooks/wandb/run-20250617_235347-qzlldo1d
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run BS64_LR4e-04_SEED42_TEMPERATURE0.2
wandb: ‚≠êÔ∏è View project at https://wandb.ai/analiju-paris/eurosat-contrastive-scratch-grid-search
wandb: üöÄ View run at https://wandb.ai/analiju-paris/eurosat-contrastive-scratch-grid-search/runs/qzlldo1d
Computed mean: [0.34414586424827576, 0.38009870052337646, 0.40766361355781555]
Computed std:  [0.09299742430448532, 0.06464488804340363, 0.0541391596198082]
Mean and std saved to models/mean_std.txt
Train/Val/Test loaders: 337/43/43 batches
Starting SimCLR training...
Starting SimCLR pretraining...
/users/c/carvalhj/miniconda3/envs/myenv/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:240: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
Epoch [1/50], Train Loss: 3.9726, Val Loss: -1.0000
Epoch [2/50], Train Loss: 2.7661, Val Loss: -1.0000
Epoch [3/50], Train Loss: 2.1972, Val Loss: -1.0000
Epoch [4/50], Train Loss: 1.9333, Val Loss: -1.0000
Epoch [5/50], Train Loss: 1.7775, Val Loss: -1.0000
Epoch [6/50], Train Loss: 1.6799, Val Loss: -1.0000
Epoch [7/50], Train Loss: 1.6021, Val Loss: -1.0000
Epoch [8/50], Train Loss: 1.5507, Val Loss: -1.0000
Epoch [9/50], Train Loss: 1.5077, Val Loss: -1.0000
Epoch [10/50], Train Loss: 1.4652, Val Loss: -1.0000
Epoch [11/50], Train Loss: 1.4349, Val Loss: -1.0000
Epoch [12/50], Train Loss: 1.4058, Val Loss: -1.0000
Epoch [13/50], Train Loss: 1.3846, Val Loss: -1.0000
Epoch [14/50], Train Loss: 1.3580, Val Loss: -1.0000
Epoch [15/50], Train Loss: 1.3444, Val Loss: -1.0000
Epoch [16/50], Train Loss: 1.3276, Val Loss: -1.0000
Epoch [17/50], Train Loss: 1.3040, Val Loss: -1.0000
Epoch [18/50], Train Loss: 1.2916, Val Loss: -1.0000
Epoch [19/50], Train Loss: 1.2679, Val Loss: -1.0000
Epoch [20/50], Train Loss: 1.2533, Val Loss: -1.0000
Epoch [21/50], Train Loss: 1.2475, Val Loss: -1.0000
Epoch [22/50], Train Loss: 1.2356, Val Loss: -1.0000
Epoch [23/50], Train Loss: 1.2252, Val Loss: -1.0000
Epoch [24/50], Train Loss: 1.2052, Val Loss: -1.0000
Epoch [25/50], Train Loss: 1.1944, Val Loss: -1.0000
Epoch [26/50], Train Loss: 1.1833, Val Loss: -1.0000
Epoch [27/50], Train Loss: 1.1729, Val Loss: -1.0000
Epoch [28/50], Train Loss: 1.1598, Val Loss: -1.0000
Epoch [29/50], Train Loss: 1.1421, Val Loss: -1.0000
Epoch [30/50], Train Loss: 1.1437, Val Loss: -1.0000
Epoch [31/50], Train Loss: 1.1254, Val Loss: -1.0000
Epoch [32/50], Train Loss: 1.1102, Val Loss: -1.0000
Epoch [33/50], Train Loss: 1.1079, Val Loss: -1.0000
Epoch [34/50], Train Loss: 1.0980, Val Loss: -1.0000
Epoch [35/50], Train Loss: 1.0871, Val Loss: -1.0000
Epoch [36/50], Train Loss: 1.0771, Val Loss: -1.0000
Epoch [37/50], Train Loss: 1.0696, Val Loss: -1.0000
Epoch [38/50], Train Loss: 1.0587, Val Loss: -1.0000
Epoch [39/50], Train Loss: 1.0463, Val Loss: -1.0000
Epoch [40/50], Train Loss: 1.0448, Val Loss: -1.0000
Epoch [41/50], Train Loss: 1.0337, Val Loss: -1.0000
Epoch [42/50], Train Loss: 1.0273, Val Loss: -1.0000
Epoch [43/50], Train Loss: 1.0236, Val Loss: -1.0000
Epoch [44/50], Train Loss: 1.0157, Val Loss: -1.0000
Epoch [45/50], Train Loss: 1.0149, Val Loss: -1.0000
Epoch [46/50], Train Loss: 1.0161, Val Loss: -1.0000
Epoch [47/50], Train Loss: 1.0083, Val Loss: -1.0000
Epoch [48/50], Train Loss: 1.0076, Val Loss: -1.0000
Epoch [49/50], Train Loss: 1.0076, Val Loss: -1.0000
wandb:                                                                                
wandb: 
wandb: Run history:
wandb:      epoch ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÜ‚ñÜ‚ñÜ‚ñÜ‚ñÜ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñà‚ñà‚ñà
wandb: train_loss ‚ñà‚ñÖ‚ñÑ‚ñÉ‚ñÉ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
wandb:   val_loss ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
wandb: 
wandb: Run summary:
wandb:      epoch 50
wandb: train_loss 1.00879
wandb:   val_loss -1
wandb: 
wandb: üöÄ View run BS64_LR4e-04_SEED42_TEMPERATURE0.2 at: https://wandb.ai/analiju-paris/eurosat-contrastive-scratch-grid-search/runs/qzlldo1d
wandb: ‚≠êÔ∏è View project at: https://wandb.ai/analiju-paris/eurosat-contrastive-scratch-grid-search
wandb: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20250617_235347-qzlldo1d/logs
/users/c/carvalhj/projects/eurosat_preprocessing/exploratory_notebooks/eurosat_contrastive-bs64.py:773: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(checkpoint_path, map_location=torch.device(DEVICE))
wandb: Tracking run with wandb version 0.19.11
wandb: Run data is saved locally in /users/c/carvalhj/projects/eurosat_preprocessing/exploratory_notebooks/wandb/run-20250618_013356-krtv0sdw
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run linear_probe_seed42_temperature0.2_bs64
wandb: ‚≠êÔ∏è View project at https://wandb.ai/analiju-paris/linear_probe_eurosat-simclr
wandb: üöÄ View run at https://wandb.ai/analiju-paris/linear_probe_eurosat-simclr/runs/krtv0sdw
Epoch [50/50], Train Loss: 1.0088, Val Loss: -1.0000
Finished SimCLR pretraining.
Saving encoder...
All runs completed.
Using mean: [0.3441457152366638, 0.3800986111164093, 0.40766361355781555]
Using std: [0.09299743920564651, 0.06464490294456482, 0.054139167070388794]
Total samples in folder: 27000, classes: ['AnnualCrop', 'Forest', 'HerbaceousVegetation', 'Highway', 'Industrial', 'Pasture', 'PermanentCrop', 'Residential', 'River', 'SeaLake']
Stratified split sizes: train=21600, val=2700, test=2700
Train/Test loaders: 379/43 batches
Train + Val loader: 379 batches
Starting linear probe training...
/users/c/carvalhj/miniconda3/envs/myenv/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:240: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
[Linear Probe] Epoch 1/30 - Loss: 1.8608, Accuracy: 56.01%
[Linear Probe] Epoch 2/30 - Loss: 1.4614, Accuracy: 70.45%
[Linear Probe] Epoch 3/30 - Loss: 1.4536, Accuracy: 70.08%
[Linear Probe] Epoch 4/30 - Loss: 1.4494, Accuracy: 70.45%
[Linear Probe] Epoch 5/30 - Loss: 1.4522, Accuracy: 70.25%
[Linear Probe] Epoch 6/30 - Loss: 1.4508, Accuracy: 70.33%
[Linear Probe] Epoch 7/30 - Loss: 1.4524, Accuracy: 70.37%
[Linear Probe] Epoch 8/30 - Loss: 1.4508, Accuracy: 70.60%
[Linear Probe] Epoch 9/30 - Loss: 1.4511, Accuracy: 70.44%
[Linear Probe] Epoch 10/30 - Loss: 1.4485, Accuracy: 70.78%
[Linear Probe] Epoch 11/30 - Loss: 1.4500, Accuracy: 70.53%
[Linear Probe] Epoch 12/30 - Loss: 1.4505, Accuracy: 70.63%
[Linear Probe] Epoch 13/30 - Loss: 1.4476, Accuracy: 71.02%
[Linear Probe] Epoch 14/30 - Loss: 1.4499, Accuracy: 70.93%
[Linear Probe] Epoch 15/30 - Loss: 1.4495, Accuracy: 71.01%
[Linear Probe] Epoch 16/30 - Loss: 1.4489, Accuracy: 70.82%
[Linear Probe] Epoch 17/30 - Loss: 1.4462, Accuracy: 71.50%
[Linear Probe] Epoch 18/30 - Loss: 1.4462, Accuracy: 71.50%
[Linear Probe] Epoch 19/30 - Loss: 1.4457, Accuracy: 71.36%
[Linear Probe] Epoch 20/30 - Loss: 1.4468, Accuracy: 71.45%
[Linear Probe] Epoch 21/30 - Loss: 1.4440, Accuracy: 71.57%
[Linear Probe] Epoch 22/30 - Loss: 1.4477, Accuracy: 71.60%
[Linear Probe] Epoch 23/30 - Loss: 1.4445, Accuracy: 71.87%
[Linear Probe] Epoch 24/30 - Loss: 1.4425, Accuracy: 71.77%
[Linear Probe] Epoch 25/30 - Loss: 1.4429, Accuracy: 71.97%
[Linear Probe] Epoch 26/30 - Loss: 1.4433, Accuracy: 71.97%
[Linear Probe] Epoch 27/30 - Loss: 1.4433, Accuracy: 72.01%
[Linear Probe] Epoch 28/30 - Loss: 1.4427, Accuracy: 71.96%
[Linear Probe] Epoch 29/30 - Loss: 1.4422, Accuracy: 72.08%
[Linear Probe] Epoch 30/30 - Loss: 1.4420, Accuracy: 72.31%
Test Accuracy: 72.30%
Linear probe accuracy: 72.31%, Test accuracy: 72.30%
[1;34mwandb[0m: 
[1;34mwandb[0m: üöÄ View run [33mlinear_probe_seed42_temperature0.2_bs64[0m at: [34mhttps://wandb.ai/analiju-paris/linear_probe_eurosat-simclr/runs/krtv0sdw[0m
[1;34mwandb[0m: Find logs at: [1;35mwandb/run-20250618_013356-krtv0sdw/logs[0m
